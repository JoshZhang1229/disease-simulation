'''
2021/09/01
30 subjects
10 houses, 3 in each

15 buildings

2021/09/02
for loops!
Ty B.T.

Somewhat useable!

Hardest tasks:
buildings!!!
recovery
home phase
number of daily interaction

2021/09/03
added daily number of interactions
added buildings!
added homes
added recovery

FINISHED!!!
'''

import random
import matplotlib.pyplot as plt

#user set parameters

rate = 0.1
starting_inf = 1

user_input_list = [1, 1, 1, 1, 1, 1]

user_input_msg_list = ["Input population: ", "Input length of experiment (in days): ", 
"Input number of actions per day: ", "Input amount of buildings: ", "Input amount of homes: ", 
"Input length of infectivity: "]

for x in range(6):
    while True:
        try:
            current_input = int(input(user_input_msg_list[x]))
            if current_input <= 0:
                print("Invalid, input must be a positive integer")
            else:
                user_input_list[x] = current_input
                break
        except:
            print("Invalid, input must be a positive integer")

subject_count = user_input_list[0]
total_day = user_input_list[1]
daily_actions = user_input_list[2]
building_count = user_input_list[3]
home_count = user_input_list[4]
inf_length = user_input_list[5]

while True:
    try:
        current_input = float(input("Input infective rate: "))
        if current_input <=0 or current_input >= 1:
            print("Invalid, input must be a decimal between 0 and 1 (exclusive): ")
        else:
            rate = current_input
            break
    except:
        print("Invalid, input must be a decimal between 0 and 1 (exclusive): ")

while True:
    try:
        current_input = int(input("Input starting number of infected: "))
        if current_input <= 0 or current_input > subject_count:
            print("Invalid, input must be a positive integer and can not be larger than the population")
        else:
            starting_inf = current_input
            break
    except:
        print("Invalid, input must be a positive integer and can  not be larger than the population")

#setup
one = [1]
zero = [0]

one_a = [1]

activity = []

#creating buildings
building_list = [[] for x in range(1, building_count)]

#removal set up
rem_inf = []

for x in range(subject_count):
    rem_inf.append(-1)

#setting up condition of the population
#0=S 1=I 2=R

population_condition = []

for x in range(subject_count):
    population_condition.append(0)

for x in random.sample(range(subject_count), k = starting_inf):
    population_condition[x] = 1
    rem_inf[x] = inf_length

#assigning what building each subject is going in
def work():

    activity_determine = [subject_count]

    while activity_determine[0] > 0:
        activity.append(random.randint(1, building_count))
        activity_determine[0] -= 1

    activity_determine[0] = subject_count

    #getting lists for which subjects are in each building
    for b in building_list:
        for a in activity:
            if a == one[0]:
                b.append(zero[0])
            zero[0] += 1
        
        zero[0] = 0
        one[0] += 1
    
    one[0] = 1

#INFECT
def infection():

    for b in building_list:

        building_sus = [0]
        building_inf = [0]

        for x in b:
            if population_condition[x] == 0:
                building_sus[0] += 1

        for x in b:
            if population_condition[x] == 1:
                building_inf[0] += 1

        current_inf = [building_inf[0]]

        for x in b:
            if population_condition[x] == 0:
                while current_inf[0] > 0:
                    current_inf[0] -= 1
                    if random.random() < rate:
                        population_condition[x] = 1
                        rem_inf[x] = inf_length
                current_inf[0] = building_inf[0]

    for b in building_list:
        b.clear()

    activity.clear()

#Homes
home_list = [[] for x in range(1, home_count + 1)]

#Subject Per Home
sph = subject_count // home_count

#assigning subjects to houses
for h in home_list:
    while one[0] <= sph and zero[0] < subject_count:
        h.append(zero[0])
        one[0] += 1
        zero[0] += 1
    one[0] = 1

for x in range(zero[0], subject_count):
    home_list[-1].append(x)

zero[0] = 0

#home infection
def home_inf():

    for h in home_list:

        building_sus = [0]
        building_inf = [0]

        for x in h:
            if population_condition[x] == 0:
                building_sus[0] += 1

        for x in h:
            if population_condition[x] == 1:
                building_inf[0] += 1

        current_inf = [building_inf[0]]

        for x in h:
            if population_condition[x] == 0:
                while current_inf[0] > 0:
                    current_inf[0] -= 1
                    if random.random() < rate:
                        population_condition[x] = 1
                        rem_inf[x] = inf_length
                current_inf[0] = building_inf[0]

#tickdown & removal
def tickdown():
    for x in rem_inf:
        if x > 1:
            rem_inf[zero[0]] -= 1
        elif x == 1:
            rem_inf[zero[0]] = 0
            population_condition[zero[0]] = 2 
        
        zero[0] += 1
    
    zero[0] = 0

#running the days
current_day = [1]

#preping for graph
overtime_days = []
for x in range(1, total_day + 1):
    overtime_days.append(x)

overtime_sus = []
overtime_inf = []
overtime_rem = []

while current_day[0] <= total_day:

    while one_a[0] <= daily_actions:
        work()
        infection()

        one_a[0] += 1

    one_a[0] = 1

    home_inf()

    tickdown()

    overtime_sus.append(population_condition.count(0))
    overtime_inf.append(population_condition.count(1))
    overtime_rem.append(population_condition.count(2))

    print ("Day: " + str(current_day[0]))

    current_day[0] += 1

plt.plot(overtime_days, overtime_sus, label = "Susceptible")
plt.plot(overtime_days, overtime_inf, label = "Infected")
plt.plot(overtime_days, overtime_rem, label = "Removed")

plt.xlabel('Days')
plt.ylabel('Number of people')
plt.title('SIR')
plt.legend()
plt.show()
